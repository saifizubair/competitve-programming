package com.company;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.PriorityQueue;
import java.util.Scanner;

public class Main {
    static class  edge {
        int src;
        int nbr;
        int wt;

        public edge(int src, int nbr, int wt) {
            this.src = src;
            this.nbr = nbr;
            this.wt = wt;
        }

    }
    public static void main(String[]args) throws IOException {
        BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
        int vtces =Integer.parseInt(br.readLine());
        ArrayList<edge>[]graph =new ArrayList[vtces];
        for (int i =0;i<vtces;i++){
            graph[i]=new ArrayList<>();
        }
        int edges =Integer.parseInt(br.readLine());
        for (int i=0;i<edges;i++) {
            String parts[] = br.readLine().split(" ");
            int v1 = Integer.parseInt(parts[0]);
            int v2 = Integer.parseInt(parts[1]);
            int wt = Integer.parseInt(parts[2]);
            graph[v1].add(new edge(v1, v2, wt));
            graph[v2].add(new edge(v2, v1, wt));
        }
        int src =Integer.parseInt(br.readLine());
        HashSet<Integer>visited =new HashSet<>();
        hamiltonianpath(graph,src,visited,src+"",0,src);
    }
    public static void  hamiltonianpath(ArrayList<edge>[]graph ,int src ,HashSet<Integer>visited ,String psf,int wt,int orsc){
        if (visited.size()== graph.length-1){

            boolean closingedgefound=false;
            for (edge e :graph[src]){
                if (e.nbr==orsc) {
                    closingedgefound=true;
                    break;
                }
            }
            if (closingedgefound==true){
                System.out.print("cycle '*' ");

            }
            else {
                System.out.print("path '.' ");
            }
            System.out.println("path "+psf+" with weight "+wt);
            return;
        }
        visited.add(src);
        for (edge e :graph[src]){
            if (visited.contains(e.nbr)==false){
                hamiltonianpath(graph,e.nbr,visited,psf+e.nbr,wt+e.wt,orsc);
            }
        }
        visited.remove(src);
    }
}





input : 

7
9
0 1 10
1 2 10
2 3 10
0 3 10
3 4 10
4 5 10
5 6 10
4 6 10
2 5 10
0


output :

path '.' path 0123456 with weight 60
path '.' path 0123465 with weight 60
cycle '*' path 0125643 with weight 60
cycle '*' path 0346521 with weight 60









